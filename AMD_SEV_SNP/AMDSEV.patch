diff --git a/common.sh b/common.sh
index 9eee947..5e9a7a5 100755
--- a/common.sh
+++ b/common.sh
@@ -40,8 +40,10 @@ build_kernel()
 
 		if [ "${V}" = "guest" ]; then
 			BRANCH="${KERNEL_GUEST_BRANCH}"
+			GIT_COMMIT="${KERNEL_GUEST_COMMIT}"
 		else
 			BRANCH="${KERNEL_HOST_BRANCH}"
+			GIT_COMMIT="${KERNEL_HOST_COMMIT}"
 		fi
 
 		# If ${KERNEL_GIT_URL} is ever changed, 'current' remote will be out
@@ -68,7 +70,8 @@ build_kernel()
 
 		pushd ${V} >/dev/null
 			run_cmd git fetch current
-			run_cmd git checkout current/${BRANCH}
+			# run_cmd git checkout current/${BRANCH}
+			run_cmd git checkout ${GIT_COMMIT}
 			COMMIT=$(git log --format="%h" -1 HEAD)
 
 			run_cmd "cp /boot/config-$(uname -r) .config"
@@ -175,7 +178,9 @@ build_install_ovmf()
 
 	pushd ovmf >/dev/null
 		run_cmd git fetch current
-		run_cmd git checkout current/${OVMF_BRANCH}
+		# run_cmd git checkout current/${OVMF_BRANCH}
+		run_cmd git checkout ${OVMF_COMMIT}
+		run_cmd git apply ${OVMF_PATCH}
 		run_cmd git submodule update --init --recursive
 		run_cmd make -C BaseTools
 		. ./edksetup.sh --reconfig
@@ -214,7 +219,8 @@ build_install_qemu()
 
 	pushd qemu >/dev/null
 		run_cmd git fetch current
-		run_cmd git checkout current/${QEMU_BRANCH}
+		# run_cmd git checkout current/${QEMU_BRANCH}
+		run_cmd git checkout ${QEMU_COMMIT}
 		run_cmd ./configure --target-list=x86_64-softmmu --prefix=$DEST
 		run_cmd $MAKE
 		run_cmd $MAKE install
diff --git a/launch-qemu.sh b/launch-qemu.sh
index cfbe7d3..51fe23c 100755
--- a/launch-qemu.sh
+++ b/launch-qemu.sh
@@ -1,5 +1,7 @@
 #!/bin/bash
 
+THIS_DIR=$(dirname "$(readlink -f "$0")")
+
 #
 # user changeable parameters
 #
@@ -15,7 +17,8 @@ CPU_MODEL="EPYC-v4"
 MONITOR_PATH=monitor
 QEMU_CONSOLE_LOG=`pwd`/stdout.log
 CERTS_PATH=
-
+USE_VIRTIO="1"
+BRIDGE=""
 
 SEV="0"
 SEV_ES="0"
@@ -23,7 +26,7 @@ SEV_SNP="0"
 ALLOW_DEBUG="0"
 USE_GDB="0"
 
-EXEC_PATH="./usr/local"
+EXEC_PATH="$THIS_DIR/usr/local"
 UEFI_PATH="$EXEC_PATH/share/qemu"
 
 usage() {
@@ -49,6 +52,8 @@ usage() {
 	echo " -monitor PATH      Path to QEMU monitor socket (default: $MONITOR_PATH)"
 	echo " -log PATH          Path to QEMU console log (default: $QEMU_CONSOLE_LOG)"
 	echo " -certs PATH        Path to SNP certificate blob for guest (default: none)"
+	echo " -bridge            Use the specified bridge device for networking"
+	echo " -novirtio          Do not use virtio devices"
 	exit 1
 }
 
@@ -56,7 +61,43 @@ add_opts() {
 	echo -n "$* " >> ${QEMU_CMDLINE}
 }
 
+stop_network() {
+	if [ "$GUEST_TAP_NAME" = "" ]; then
+		return
+	fi
+	run_cmd "ip tuntap del ${GUEST_TAP_NAME} mode tap"
+}
+
+setup_bridge_network() {
+	# Get last tap device on host
+	TAP_NUM="$(ip link show type tun | grep 'tap[0-9]\+' | sed -re 's|.*tap([0-9]+):.*|\1|' | sort -n | tail -1)"
+	if [ "$TAP_NUM" = "" ]; then
+		TAP_NUM="0"
+	fi
+	TAP_NUM=$((TAP_NUM + 1))
+	GUEST_TAP_NAME="tap${TAP_NUM}"
+
+	[ -n "$USE_VIRTIO" ] && PREFIX="52:54:00" || PREFIX="02:16:1e"
+	SUFFIX="$(ip address show dev $BRIDGE | grep link/ether | awk '{print $2}' | awk -F : '{print $4 ":" $5}')"
+	GUEST_MAC_ADDR=$(printf "%s:%s:%02x" $PREFIX $SUFFIX $TAP_NUM)
+
+	echo "Starting network adapter '${GUEST_TAP_NAME}' MAC=$GUEST_MAC_ADDR"
+	run_cmd "ip tuntap add $GUEST_TAP_NAME mode tap user `whoami`"
+	run_cmd "ip link set $GUEST_TAP_NAME up"
+	run_cmd "ip link set $GUEST_TAP_NAME master $BRIDGE"
+
+	if [ -n "$USE_VIRTIO" ]; then
+		add_opts "-netdev type=tap,script=no,downscript=no,id=net0,ifname=$GUEST_TAP_NAME"
+		add_opts "-device virtio-net-pci,mac=${GUEST_MAC_ADDR},netdev=net0,disable-legacy=on,iommu_platform=true,romfile="
+	else
+		add_opts "-netdev tap,id=net0,ifname=$GUEST_TAP_NAME,script=no,downscript=no"
+		add_opts "-device e1000,mac=${GUEST_MAC_ADDR},netdev=net0,romfile="
+	fi
+}
+
 exit_from_int() {
+	stop_network
+
 	rm -rf ${QEMU_CMDLINE}
 	# restore the mapping
 	stty intr ^c
@@ -152,6 +193,11 @@ while [ -n "$1" ]; do
 		-certs) CERTS_PATH="$2"
 				shift
 				;;
+		-bridge)	BRIDGE=$2
+				shift
+				;;
+		-novirtio)  USE_VIRTIO=""
+				;;
 		*) 		usage
 				;;
 	esac
@@ -241,7 +287,7 @@ add_opts "-no-reboot"
 # The OVMF binary, including the non-volatile variable store, appears as a
 # "normal" qemu drive on the host side, and it is exposed to the guest as a
 # persistent flash device.
-add_opts "-drive if=pflash,format=raw,unit=0,file=${UEFI_CODE},readonly"
+add_opts "-drive if=pflash,format=raw,unit=0,file=${UEFI_CODE},readonly=on"
 add_opts "-drive if=pflash,format=raw,unit=1,file=${UEFI_VARS}"
 
 # add CDROM if specified
@@ -251,10 +297,10 @@ add_opts "-drive if=pflash,format=raw,unit=1,file=${UEFI_VARS}"
 # distros like Ubuntu 20.04 still only provide 4.1, so only enable
 # usermode network if specifically requested.
 if [ "$USE_DEFAULT_NETWORK" = "1" ]; then
-    #echo "guest port 22 is fwd to host 8000..."
-    #add_opts "-netdev user,id=vmnic,hostfwd=tcp::8000-:22 -device e1000,netdev=vmnic,romfile="
-    add_opts "-netdev user,id=vmnic"
-    add_opts " -device virtio-net-pci,disable-legacy=on,iommu_platform=true,netdev=vmnic,romfile="
+	#echo "guest port 22 is fwd to host 8000..."
+	#add_opts "-netdev user,id=vmnic,hostfwd=tcp::8000-:22 -device e1000,netdev=vmnic,romfile="
+	add_opts "-netdev user,id=vmnic"
+	add_opts " -device virtio-net-pci,disable-legacy=on,iommu_platform=true,netdev=vmnic,romfile="
 fi
 
 # If harddisk file is specified then add the HDD drive
@@ -322,6 +368,12 @@ fi
 # start monitor on pty and named socket 'monitor'
 add_opts "-monitor pty -monitor unix:${MONITOR_PATH},server,nowait"
 
+if [ -n "$BRIDGE" ]; then
+	setup_bridge_network
+else
+	add_opts "-netdev user,id=vmnic -device e1000,netdev=vmnic,romfile="
+fi
+
 # save the command line args into log file
 cat $QEMU_CMDLINE | tee ${QEMU_CONSOLE_LOG}
 echo | tee -a ${QEMU_CONSOLE_LOG}
diff --git a/stable-commits b/stable-commits
index bc851d1..b428ec6 100644
--- a/stable-commits
+++ b/stable-commits
@@ -3,13 +3,16 @@
 #
 
 # hypervisor commit
-KERNEL_GIT_URL="https://github.com/AMDESE/linux.git"
+KERNEL_GIT_URL="https://github.com/dimstav23/amd-linux.git"
 KERNEL_HOST_BRANCH="snp-host-latest"
+KERNEL_HOST_COMMIT="6b293770dac2fc37e7a880a321045d54bc88b0ce"
 KERNEL_GUEST_BRANCH="snp-guest-latest"
+KERNEL_GUEST_COMMIT="98543c2aa64942a32cf623f2b8b3ddd01ef515c2"
 
 # qemu commit
-QEMU_GIT_URL="https://github.com/AMDESE/qemu.git"
+QEMU_GIT_URL="https://github.com/dimstav23/amd-qemu.git"
 QEMU_BRANCH="snp-latest"
+QEMU_COMMIT="b6ee1218e6c9b98a556841615dd10d094e648393"
 
 # guest bios
 #   An AP creation fix added after the 'edk2-stable202302' tag/release is
@@ -19,5 +22,7 @@ QEMU_BRANCH="snp-latest"
 #   please use the 'sev-snp-legacy' branch of this AMDSEV repo instead,
 #   which will build the latest known-working QEMU/OVMF trees for older
 #   SNP hypervisor/host kernels.
-OVMF_GIT_URL="https://github.com/AMDESE/ovmf.git"
+OVMF_GIT_URL="https://github.com/dimstav23/amd-ovmf.git"
 OVMF_BRANCH="snp-latest"
+OVMF_COMMIT="09fbe92dc545779671d7fd89a5bd4f1b14f7e69b"
+OVMF_PATCH="../../ovmf.patch"
\ No newline at end of file
